- name: Include vars
  include_vars: '{{ENV}}.yml'

- name: Find out ops's path
  shell: pwd
  register: ops_path_output
  connection: local

- name: get version from package
  shell: cat "{{ops_path_output.stdout}}/../package.json"
  register: package_json
  connection: local

- set_fact: package="{{ package_json.stdout | from_json }}"

- name: Clone Repo
  git:
    repo: '{{ repository }}'
    dest: '/home/{{ ansible_user }}/{{ app }}'
    version: '{{branch}}'
    force: yes
    accept_hostkey: yes
    key_file: '/home/{{ ansible_user }}/.ssh/cgus-bot-key'
  tags:
    - setup
    - update

- name: Build the image
  become: yes
  community.general.docker_image:
    source: build
    build:
      network: host
      pull: yes
      args:
        ENV_FILE: '{{ env_file }}'
      path: '/home/{{ ansible_user }}/{{ app }}'
    name: '{{ app }}:{{ package.version }}'
    force_source: yes

- name: Start the container
  become: yes
  community.general.docker_container:
    name: '{{ app }}-1'
    image: '{{ app }}:{{ package.version }}'
    restart: yes
    state: started
    restart_policy: unless-stopped
    env:
      PROCESSOR_ID: '1'
      SERVER_PORT: '4000'
      PEREN_API_KEY: '{{ peren_api_key }}'
    ports:
      - '{{ app_port }}:4000'

- name: Start the second container
  become: yes
  when: nb_processors == '2'
  community.general.docker_container:
    name: '{{ app }}-2'
    image: '{{ app }}:{{ package.version }}'
    restart: yes
    state: started
    restart_policy: unless-stopped
    env:
      PROCESSOR_ID: '2'
      NB_TWEETS_TO_SCRAPE: '6000'
      MIN_PRIORITY: '2'
      API: 'false'

- name: Prune containers and images
  become: yes
  community.docker.docker_prune:
    containers: yes
    images: yes
    networks: false
    volumes: false
    builder_cache: false
